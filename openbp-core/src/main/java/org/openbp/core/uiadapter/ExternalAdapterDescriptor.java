/*
 *   Copyright 2007 skynamics AG
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package org.openbp.core.uiadapter;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.openbp.core.model.Model;

/**
 * This class describes an external user interface adapter.
 *
 * @author Heiko Erhardt
 */
public final class ExternalAdapterDescriptor
	implements UIAdapterDescriptor
{
	//////////////////////////////////////////////////
	// @@ Constants
	//////////////////////////////////////////////////

	/** Holds display texts for representing this UI adapter. */
	private final Map displayTexts;

	/** Valid mime types for the documents generated by this adapter */
	private final String[] validMimeTypes;

	//////////////////////////////////////////////////
	// @@ Initialization
	//////////////////////////////////////////////////

	/**
	 * Private default constructor.
	 */
	public ExternalAdapterDescriptor()
	{
		validMimeTypes = new String[] {};

		Map temp = new HashMap();
		temp.put(ASSOCIATION_DISPLAY_NAME, "External UI framework");
		temp.put(ASSOCIATION_HINT_MESSAGE, "No external UI framework implementation present.");
		temp.put(COCKPIT_DISPLAY_NAME, "External framework");
		displayTexts = Collections.unmodifiableMap(temp);
	}

	//////////////////////////////////////////////////
	// @@ UIAdapterDescriptor implementation
	//////////////////////////////////////////////////

	/**
	 * @copy org.openbp.core.uiadapter.UIAdapterDescriptor.getDisplayText(String)
	 */
	public String getDisplayText(String key)
	{
		return (String) displayTexts.get(key);
	}

	/**
	 * @copy org.openbp.core.uiadapter.UIAdapterDescriptor.getFileExtension()
	 */
	public String getFileExtension()
	{
		return "java";
	}

	/**
	 * @copy org.openbp.core.uiadapter.UIAdapterDescriptor.getMimeTypes()
	 */
	public String[] getMimeTypes()
	{
		return validMimeTypes;
	}

	/**
	 * @copy org.openbp.core.uiadapter.UIAdapterDescriptor.getUIAdapterClassName()
	 */
	public String getUIAdapterClassName()
	{
		return "org.openbp.server.uiadapter.external.ExternalAdapter";
	}

	/**
	 * Gets the path to a visual implementation.
	 *
	 * @param visualId Id of the visual
	 * @return The visual path
	 */
	public String getVisualPathName(String visualId, Model model)
	{
		return null;
	}

	/**
	 * Adapternbp.core.uiadapter.UIAdapterDescriptor.getVisualType ()
	 */
	public String getVisualType()
	{
		return "external";
	}
}
