/*
 *   Copyright 2007 skynamics AG
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package org.openbp.client.remote;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

import org.openbp.common.ExceptionUtil;
import org.openbp.common.ReflectUtil;
import org.openbp.common.logger.LogUtil;
import org.openbp.core.CoreConstants;
import org.openbp.core.OpenBPException;
import org.openbp.core.remote.ClientConnectionInfo;
import org.openbp.core.remote.RemoteConnector;

/**
 * Connector to access a remote service via RMI
 */
public class RemoteConnectorClient
{
	//////////////////////////////////////////////////
	// @@ Data members
	//////////////////////////////////////////////////

	/** The server object we are bound to */
	private RemoteConnector server;

	/** Connection info to the OpenBP server */
	private ClientConnectionInfo connectionInfo;

	/** Debug print flag */
	private boolean debugPrinted;

	//////////////////////////////////////////////////
	// @@ Construction
	//////////////////////////////////////////////////

	/**
	 * Constructor.
	 */
	public RemoteConnectorClient()
	{
	}

	//////////////////////////////////////////////////
	// @@ Property access
	//////////////////////////////////////////////////

	/**
	 * Gets the connection info to the OpenBP server.
	 * @nowarn
	 */
	public ClientConnectionInfo getConnectionInfo()
	{
		return connectionInfo;
	}

	/**
	 * Sets the connection info to the OpenBP server.
	 * @nowarn
	 */
	public void setConnectionInfo(ClientConnectionInfo connectionInfo)
	{
		this.connectionInfo = connectionInfo;
	}

	//////////////////////////////////////////////////
	// @@ Binding
	//////////////////////////////////////////////////

	/**
	 * Binds the class to the RMI registry.
	 */
	public void connectToServer()
	{
		try
		{
			if (connectionInfo == null)
			{
				connectionInfo = new ClientConnectionInfo();
				connectionInfo.loadFromProperties();
			}

			if (! debugPrinted)
			{
				LogUtil.info(getClass(), "Connecting to RMI server $0, port {1}.", connectionInfo.getRmiServerHost(), Integer.valueOf(connectionInfo.getRmiServerPort()));
				debugPrinted = true;
			}

			// First, look up the RMI registry
			Registry registry = LocateRegistry.getRegistry(connectionInfo.getRmiServerHost(), connectionInfo.getRmiServerPort());
			if (registry == null)
				throw new OpenBPException("ServerConnection.Unvavailable", "Error connecting to server " + connectionInfo.getRmiServerHost()
					+ ", port " + connectionInfo.getRmiServerPort() + ".");

			// Next, get the service registry over RMI
			try
			{
				server = (RemoteConnector) registry.lookup(CoreConstants.RMI_BINDING_NAME);
			}
			catch (NotBoundException e)
			{
				LogUtil.info(getClass(), "Connect to RMI server $0, port {1} failed.", connectionInfo.getRmiServerHost(), Integer.valueOf(connectionInfo.getRmiServerPort()));

				throw new OpenBPException("ServerConnection.Unvavailable", "Error connecting to the RemoteConnector on the server", e);
			}

			LogUtil.info(getClass(), "Connected to RMI server.");
		}
		catch (RemoteException e)
		{
			processRemoteException(e);
		}
	}

	//////////////////////////////////////////////////
	// @@ Method invocation
	//////////////////////////////////////////////////

	/**
	 * Invokes a method of a remote service.
	 *
	 * @param interfaceName Fully qualified name of the interface that contains the method
	 * @param methodName Method name as generated by {@link ReflectUtil#getUnqualifiedMethodSignature}
	 * @param args Method arguments or null
	 * @return Return value of the remote method or null for void methods
	 */
	public Object invokeMethod(String interfaceName, String methodName, Object[] args)
	{
		Object ret = null;
		try
		{
			ret = server.invokeMethod(interfaceName, methodName, args);
		}
		catch (RemoteException e)
		{
			processRemoteException(e);
		}
		return ret;
	}

	private void processRemoteException(RemoteException e)
	{
		// Check for our native exception
		Throwable t = ExceptionUtil.findNestedException(e, OpenBPException.class.getName());
		if (t != null)
			throw (OpenBPException) t;

		// Unwrap exception, if any
		Throwable cause = e.getCause();
		if (cause != null)
		{
			t = cause;
		}
		throw new OpenBPException("ServerConnection.Invocation", "Error requesting or invoking service.", t);
	}
}
